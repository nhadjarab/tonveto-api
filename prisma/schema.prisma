// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  email        String @id @unique
  passwordHash String
}

model Pet {
  id            String          @id @unique @default(cuid())
  sex           String
  name          String
  birth_date    String
  species       String
  breed         String
  crossbreed    Boolean
  sterilised    Boolean
  owner         User            @relation(fields: [owner_id], references: [id])
  owner_id      String
  appointments  Appointment[]
  MedicalReport MedicalReport[]
}

model User {
  id               String  @id @unique @default(cuid())
  first_name       String
  last_name        String
  email            String  @unique
  birth_date       String
  phone_number     String
  profile_complete Boolean @default(false)
  type             String  @default("user")

  pets          Pet[]
  appointments  Appointment[]
  CommentVet    CommentVet[]
  CommentClinic CommentClinic[]
  RatingVet     RatingVet[]
  RatingClinic  RatingClinic[]
}

model Vet {
  id                   String           @id @unique @default(cuid())
  first_name           String
  last_name            String
  email                String           @unique
  birth_date           String
  phone_number         String
  identification_order String           @default("1111111111")
  profile_complete     Boolean          @default(false)
  is_approved          Boolean          @default(false)
  type                 String           @default("vet")
  bank_details         String
  balance              Float            @default(0)
  specialities         Specialty[]
  appointments         Appointment[]
  clinics              VetClinic[]
  Clinic               Clinic[]
  calendar             Calendar[]
  MedicalReport        MedicalReport[]
  CommentVet           CommentVet[]
  RatingVet            RatingVet[]
  PendingPayment       PendingPayment[]

  @@unique([id, identification_order])
}

model VetClinic {
  id        String  @unique @default(cuid())
  vet       Vet     @relation(fields: [vet_id], references: [id])
  vet_id    String
  clinic    Clinic  @relation(fields: [clinic_id], references: [id])
  clinic_id String
  approved  Boolean @default(false)

  @@id([vet_id, clinic_id])
}

model Specialty {
  id     String @id @unique @default(cuid())
  name   String
  price  String
  vet    Vet    @relation(fields: [vet_id], references: [id])
  vet_id String
}

model Clinic {
  id            String          @id @unique @default(cuid())
  name          String
  address       String
  city          String
  country       String
  phone_number  String
  owner_id      String
  zip_code      String          @default("00000")
  is_approved   Boolean         @default(false)
  owner         Vet             @relation(fields: [owner_id], references: [id])
  vets          VetClinic[]
  CommentClinic CommentClinic[]
  RatingClinic  RatingClinic[]
}

model Appointment {
  id            String          @id @unique @default(cuid())
  date          String
  time          String
  pet           Pet?            @relation(fields: [pet_id], references: [id])
  pet_id        String?
  vet           Vet             @relation(fields: [vet_id], references: [id])
  vet_id        String
  user          User?           @relation(fields: [user_id], references: [id])
  user_id       String?
  MedicalReport MedicalReport[]
}

model Calendar {
  id        String @id @unique @default(cuid())
  monday    String
  tuesday   String
  wednesday String
  thursday  String
  friday    String
  saturday  String
  sunday    String
  owner_id  String @unique
  vet       Vet    @relation(fields: [owner_id], references: [id])
}

model MedicalReport {
  id             String      @id @unique @default(cuid())
  appointment_id String
  appointment    Appointment @relation(fields: [appointment_id], references: [id])
  reason         String
  diagnosis      String
  treatment      String
  notes          String
  pet_id         String
  pet            Pet         @relation(fields: [pet_id], references: [id])
  vet_id         String
  vet            Vet         @relation(fields: [vet_id], references: [id])
}

model Admin {
  id           String @id @unique @default(cuid())
  first_name   String
  last_name    String
  email        String @unique
  birth_date   String
  phone_number String
  type         String @default("admin")
}

model CommentVet {
  id               String             @id @unique @default(cuid())
  text             String
  vet_id           String
  vet              Vet                @relation(fields: [vet_id], references: [id])
  owner_id         String
  owner            User               @relation(fields: [owner_id], references: [id])
  rating           RatingVet          @relation(fields: [rating_id], references: [id])
  rating_id        String
  CommentVetReport CommentVetReport[]
}

model CommentClinic {
  id        String       @id @unique @default(cuid())
  text      String
  clinic_id String
  clinic    Clinic       @relation(fields: [clinic_id], references: [id])
  owner_id  String
  owner     User         @relation(fields: [owner_id], references: [id])
  rating_id String
  rating    RatingClinic @relation(fields: [rating_id], references: [id])

  CommentClinicReport CommentClinicReport[]
}

model RatingVet {
  id         String       @id @unique @default(cuid())
  rating     Float
  vet_id     String
  vet        Vet          @relation(fields: [vet_id], references: [id])
  owner_id   String
  owner      User         @relation(fields: [owner_id], references: [id])
  CommentVet CommentVet[]
}

model RatingClinic {
  id            String          @id @unique @default(cuid())
  rating        Float
  clinic_id     String
  clinic        Clinic          @relation(fields: [clinic_id], references: [id])
  owner_id      String
  owner         User            @relation(fields: [owner_id], references: [id])
  CommentClinic CommentClinic[]
}

model CommentClinicReport {
  id            String        @id @unique @default(cuid())
  comment_id    String
  comment       CommentClinic @relation(fields: [comment_id], references: [id])
  reported_by   String
  reporter_type String
  clinic_id     String
  report_type   String        @default("clinic")
}

model CommentVetReport {
  id            String     @id @unique @default(cuid())
  comment       CommentVet @relation(fields: [comment_id], references: [id])
  comment_id    String
  reported_by   String
  reporter_type String
  vet_id        String
  report_type   String     @default("vet")
}

model PendingPayment {
  id             String @id @unique @default(cuid())
  amount         Float
  vet_id         String
  user_id        String
  appointment_id String
  payment_id     String
  vet            Vet    @relation(fields: [vet_id], references: [id])
}
